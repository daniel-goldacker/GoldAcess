import streamlit as st

def api_docs():
    st.title("üìò Documenta√ß√£o API")

    st.markdown("""
    Esta API fornece endpoints para autentica√ß√£o e verifica√ß√£o de tokens usando JWT.
    Voc√™ pode integr√°-la com seus sistemas para garantir acesso seguro aos seus servi√ßos.

    ---

    ## üîê `POST /api/auth`
    Endpoint para autenticar um usu√°rio e gerar um token JWT.

    ### Par√¢metros (form-data):
    - `username`: *string* ‚Äì Nome de usu√°rio
    - `password`: *string* ‚Äì Senha do usu√°rio

    ### Respostas:
    - `200 OK`:
        ```json
        {
            "status": "ok",
            "token": "<jwt_token>"
        }
        ```
    - `401 UNAUTHORIZED`:
        ```json
        {
            "status": "fail",
            "message": "Credenciais inv√°lidas"
        }
        ```

    ### Exemplo (cURL):
    ```bash
    curl -X POST http://localhost:8000/api/auth \\
      -F "username=admin" \\
      -F "password=1234"
    ```

    ### Exemplo (Python):
    ```python
    import requests

    response = requests.post("http://localhost:8000/api/auth", data={
        "username": "admin",
        "password": "1234"
    })

    print(response.json())
    ```

    ---

    ## ‚úÖ `GET /api/verify`
    Verifica se um token JWT enviado no cabe√ßalho `Authorization` √© v√°lido.

    ### Cabe√ßalho:
    - `Authorization: Bearer <token>`

    ### Respostas:
    - `200 OK`:
        ```json
        {
            "valid": true,
            "user": { ... }
        }
        ```
    - `401 UNAUTHORIZED`:
        ```json
        {
            "valid": false,
            "reason": "Formato inv√°lido"
        }
        ```

    ### Exemplo (cURL):
    ```bash
    curl -X GET http://localhost:8000/api/verify \\
      -H "Authorization: Bearer <seu_token_aqui>"
    ```

    ---

    üë®‚Äçüíª **Dica:** Use o token retornado do `/api/auth` como cabe√ßalho `Authorization` em chamadas protegidas.

    """)

